{"version":3,"sources":["firebaseConfig.js","demo.jpg","App.js","reportWebVitals.js","index.js"],"names":["config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","initializeApp","auth","firestore","SignIn","onClick","provider","GoogleAuthProvider","signInWithPopup","className","style","margin","SignOut","currentUser","signOut","Chatroom","referingElement","useRef","messageRef","collection","query","orderBy","limit","useCollectionData","idField","messages","useState","formValue","setFormValue","sendMessage","check","a","preventDefault","uid","photoURL","add","text","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","behavior","map","msg","ChatMessage","message","id","ref","onSubmit","value","onChange","target","placeholder","type","messageType","src","userPicture","alt","App","useAuthState","user","fontSize","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yRAUmBA,EAVJ,CACXC,OAAQ,0CACRC,WAAY,qCACZC,UAAW,qBACXC,cAAe,iCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,gBCPJ,MAA0B,iC,OCUzCC,IAASC,cAAcT,GAEvB,IAAMU,EAAOF,IAASE,OAChBC,EAAYH,IAASG,YAoB3B,SAASC,IAMP,OACE,qCACE,wBAAQC,QAPS,WACnB,IAAMC,EAAW,IAAIN,IAASE,KAAKK,mBACnCL,EAAKM,gBAAgBF,IAKYG,UAAU,UAAzC,iCACA,mBAAGC,MAAO,CAAEC,OAAQ,aAApB,mFAKN,SAASC,IACP,OAAOV,EAAKW,aACV,wBAAQJ,UAAU,WAAWJ,QAAU,kBAAMH,EAAKY,WAAlD,sBAIJ,SAASC,IACP,IAAMC,EAAkBC,mBAElBC,EAAaf,EAAUgB,WAAW,YAClCC,EAAQF,EAAWG,QAAQ,aAAaC,MAAM,IAJlC,EAMCC,YAAkBH,EAAO,CAACI,QAAS,OAA/CC,EANW,sBAQgBC,mBAAS,IARzB,mBAQXC,EARW,KAQAC,EARA,KAUZC,EAAW,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DAClBD,EAAME,iBADY,EAEQ9B,EAAKW,YAAvBoB,EAFU,EAEVA,IAAKC,EAFK,EAELA,SAFK,SAIZhB,EAAWiB,IAAI,CACnBC,KAAMT,EACNU,UAAWrC,IAASG,UAAUmC,WAAWC,kBACzCN,MACAC,aARgB,OAWlBN,EAAa,IACbZ,EAAgBwB,QAAQC,eAAgB,CAAEC,SAAU,WAZlC,2CAAH,sDAcjB,OACE,qCAEE,+BACE,sBAAKjC,UAAU,gBAAf,UACGgB,GAAYA,EAASkB,KAAK,SAACC,GAAD,OAAS,cAACC,EAAD,CAA0BC,QAASF,GAAjBA,EAAIG,OAC1D,qBAAKC,IAAKhC,SAGd,uBAAMiC,SAAWpB,EAAjB,UACE,uBAAOqB,MAAQvB,EAAYwB,SAAW,SAACrB,GAAD,OAAWF,EAAaE,EAAMsB,OAAOF,QAASG,YAAY,yBAChG,wBAAQC,KAAK,SAAb,wBAOR,SAAST,EAAT,GAAmC,IAAZC,EAAW,EAAXA,QACbV,EAAwBU,EAAxBV,KAAMH,EAAkBa,EAAlBb,IAAKC,EAAaY,EAAbZ,SACbqB,EAActB,IAAQ/B,EAAKW,YAAYoB,IAAM,OAAS,WAE5D,OACE,sBAAKxB,UAAS,kBAAa8C,EAAb,KAAd,UACE,qBAAKC,IAAKV,EAAQZ,SAAWA,EAAWuB,EAAcC,IAAI,YAC1D,4BAAItB,OAKKuB,MA5Ff,WAAgB,IAAD,EAEEC,YAAa1D,GAArB2D,EAFM,oBAIb,OACE,sBAAKpD,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,UACE,oBAAIC,MAAO,CAAEoD,SAAU,OAAvB,uCACA,cAAClD,EAAD,OAEF,kCACIiD,EAAO,cAAC9C,EAAD,IAAe,cAACX,EAAD,UCdjB2D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.41574839.chunk.js","sourcesContent":["const config = {\r\n    apiKey: \"AIzaSyAawO7YRgRL45SmK8MjKtK4u65ONAYV0M4\",\r\n    authDomain: \"chatting-app-12990.firebaseapp.com\",\r\n    projectId: \"chatting-app-12990\",\r\n    storageBucket: \"chatting-app-12990.appspot.com\",\r\n    messagingSenderId: \"112567462662\",\r\n    appId: \"1:112567462662:web:cb70df137e23e02009cc87\",\r\n    measurementId: \"G-9PLQVRNLFZ\"\r\n    };\r\n  \r\n    export default config;","export default __webpack_public_path__ + \"static/media/demo.b8a96309.jpg\";","import React, { useState, useRef } from 'react';\nimport './App.css';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\nimport config from './firebaseConfig'\nimport userPicture from './demo.jpg' \n\nfirebase.initializeApp(config)\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\nfunction App() { \n\n  const [user] = useAuthState(auth); \n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h3 style={{ fontSize: '4vw' }}>ðŸ’¬ CHATTING APP</h3>\n        <SignOut />\n      </header>\n      <section>\n        { user ? <Chatroom /> : <SignIn /> }\n        {/* {console.log(user)} */}\n      </section>\n    </div>\n  );\n}\n\nfunction SignIn() {\n  const signInGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  }\n\n  return (\n    <>\n      <button onClick={signInGoogle} className='sign-in'>Sign in with Google</button>\n      <p style={{ margin: \"15px auto\"}}>Do not violate the community guidelines or Actions will be taken !</p>\n    </>\n  )\n}\n\nfunction SignOut() {\n  return auth.currentUser && ( \n    <button className='sign-out' onClick={ () => auth.signOut() } >Sign out</button>\n  )\n}\n\nfunction Chatroom() {\n  const referingElement = useRef();\n\n  const messageRef = firestore.collection(\"messages\");\n  const query = messageRef.orderBy('createdAt').limit(25);\n\n  const [messages] = useCollectionData(query, {idField: 'id'});\n\n  const [formValue, setFormValue] = useState('');\n  \n  const sendMessage = async (check) => {\n    check.preventDefault();\n    const { uid, photoURL } = auth.currentUser;\n\n    await messageRef.add({\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL\n    });\n\n    setFormValue('');\n    referingElement.current.scrollIntoView( { behavior: 'smooth' } );\n  }\n  return (\n    <>\n\n      <main>\n        <div className='messageScreen'>\n          {messages && messages.map( (msg) => <ChatMessage key={msg.id} message={msg} />  )}\n          <div ref={referingElement}></div>\n        </div>\n      </main>\n      <form onSubmit={ sendMessage }>\n        <input value={ formValue } onChange={ (check) => setFormValue(check.target.value) } placeholder='Enter your text here' />\n        <button type='submit'>Send</button>\n      </form>\n    </>\n  )\n\n}\n\nfunction ChatMessage({ message }) {\n  const { text, uid, photoURL } = message;\n  const messageType = uid === auth.currentUser.uid ? 'sent' : 'received' ;\n\n  return ( \n    <div className={`message ${messageType} `}>\n      <img src={message.photoURL ? photoURL : userPicture } alt=\"profile\" />\n      <p>{text}</p>\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}